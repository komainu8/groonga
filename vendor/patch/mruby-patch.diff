--- vendor/mruby-source/src/vm.c	2020-02-18 12:15:54.346444209 +0900
+++ vendor/mruby-source/src/vm.c	2020-02-28 16:43:58.494681189 +0900
@@ -117,7 +117,7 @@ stack_clear(mrb_value *from, size_t coun
 }
 
 static inline void
-stack_copy(mrb_value *dst, const mrb_value *src, size_t size)
+stack_copy(mrb_value *dst, const mrb_value *src, mrb_int size)
 {
   while (size-- > 0) {
     *dst++ = *src++;
@@ -182,13 +182,13 @@ stack_extend_alloc(mrb_state *mrb, mrb_i
 {
   mrb_value *oldbase = mrb->c->stbase;
   mrb_value *newstack;
-  size_t oldsize = mrb->c->stend - mrb->c->stbase;
-  size_t size = oldsize;
-  size_t off = mrb->c->stack - mrb->c->stbase;
+  mrb_int oldsize = mrb->c->stend - mrb->c->stbase;
+  mrb_int size = oldsize;
+  mrb_int off = mrb->c->stack - mrb->c->stbase;
 
   if (off > size) size = off;
 #ifdef MRB_STACK_EXTEND_DOUBLING
-  if ((size_t)room <= size)
+  if (room <= size)
     size *= 2;
   else
     size += room;
@@ -475,9 +475,9 @@ mrb_funcall_with_block(mrb_state *mrb, m
         mrb_method_missing(mrb, mid, self, args);
       }
       mrb_ary_unshift(mrb, args, mrb_symbol_value(mid));
-      mrb_stack_extend(mrb, n+2);
-      mrb->c->stack[n+1] = args;
-      argc = -1;
+//      mrb_stack_extend(mrb, n+2);
+//      mrb->c->stack[n+1] = args;
+//      argc = -1;
     }
     if (mrb->c->ci - mrb->c->cibase > MRB_FUNCALL_DEPTH_MAX) {
       mrb_exc_raise(mrb, mrb_obj_value(mrb->stack_err));
@@ -515,7 +515,7 @@ mrb_funcall_with_block(mrb_state *mrb, m
     if (ci->argc > 0) {
       stack_copy(mrb->c->stack+1, argv, argc);
     }
-    mrb->c->stack[argc+1] = blk;
+        mrb->c->stack[argc+1] = blk;
 
     if (MRB_METHOD_CFUNC_P(m)) {
       int ai = mrb_gc_arena_save(mrb);

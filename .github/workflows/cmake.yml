name: CMake
on:
  push:
  pull_request:
concurrency:
  group: ${{ github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true
jobs:
  windows-msvc:
    name: Windows MSVC
    strategy:
      fail-fast: false
      matrix:
        include:
          - runs-on: windows-2022
            vc-toolset-version: 143
            vs-version: 2022
    env:
      VC_ARCHITECTURE: x64
    runs-on: ${{ matrix.runs-on }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: actions/checkout@v4
        with:
          path: apache-arrow
          ref: apache-arrow-18.0.0
          repository: apache/arrow
          submodules: recursive
      # Use CMake 3.27 not 3.26.
      # Workaround: https://github.com/actions/runner-images/issues/8598
      - name: Remove Strawberry Perl
        run: |
          Remove-Item C:\Strawberry -Force -Recurse
      - name: Disable crash dialog
        run: |
          reg add "HKCU\SOFTWARE\Microsoft\Windows\Windows Error Reporting" `
            /v DontShowUI `
            /t REG_DWORD `
            /d 1 `
            /f
      - name: Use JST
        run: |
          Set-TimeZone -Id "Tokyo Standard Time"
      - name: Download bundled packages
        run: |
          cd vendor
          ruby download_groonga_normalizer_mysql.rb
          ruby download_lz4.rb
          ruby download_mecab.rb
          ruby download_xxhash.rb
          ruby download.rb
      - name: Set environments
        run: |
          Write-Output "CMAKE_BUILD_PARALLEL_LEVEL=${Env:NUMBER_OF_PROCESSORS}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $GROONGA_VERSION = (Get-Content base_version)
          if (!("${Env:GITHUB_REF}".StartsWith("refs/tags/"))) {
            $GROONGA_VERSION += "-$(${Env:GITHUB_SHA}.Substring(0, 7))"
          }
          Write-Output "GROONGA_VERSION=${GROONGA_VERSION}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          $INSTALL_FOLDER = "groonga-${GROONGA_VERSION}-${Env:VC_ARCHITECTURE}-vs${{ matrix.vs-version }}"
          $INSTALL_FOLDER_WITH_VCRUNTIME = "${INSTALL_FOLDER}-with-vcruntime"
          $INSTALL_PARENT_FOLDER = "install"
          $INSTALL_PARENT_FOLDER_WITH_VCRUNTIME = `
            "${INSTALL_PARENT_FOLDER}-with-vcruntime"
          $RELATIVE_INSTALL_FOLDER = "${INSTALL_PARENT_FOLDER}\${INSTALL_FOLDER}"
          $RELATIVE_INSTALL_FOLDER_WITH_VCRUNTIME = `
            "${INSTALL_PARENT_FOLDER_WITH_VCRUNTIME}\${INSTALL_FOLDER_WITH_VCRUNTIME}"
          $FULL_INSTALL_FOLDER = `
            "${Env:GITHUB_WORKSPACE}\${RELATIVE_INSTALL_FOLDER}"
          $FULL_INSTALL_FOLDER_WITH_VCRUNTIME = `
            "${Env:GITHUB_WORKSPACE}\${RELATIVE_INSTALL_FOLDER_WITH_VCRUNTIME}"
          Write-Output "INSTALL_FOLDER=${INSTALL_FOLDER}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "INSTALL_FOLDER_WITH_VCRUNTIME=${INSTALL_FOLDER_WITH_VCRUNTIME}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "FULL_INSTALL_FOLDER=${FULL_INSTALL_FOLDER}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          Write-Output "FULL_INSTALL_FOLDER_WITH_VCRUNTIME=${FULL_INSTALL_FOLDER_WITH_VCRUNTIME}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          if (${{ matrix.vs-version }} -ge 2022) {
            $VC_PREFIX = "C:\Program Files\Microsoft Visual Studio\${{ matrix.vs-version }}\Enterprise\VC"
          }
          else {
            $VC_PREFIX = "C:\Program Files (x86)\Microsoft Visual Studio\${{ matrix.vs-version }}\Enterprise\VC"
          }
          Write-Output "VC_PREFIX=${VC_PREFIX}" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          Write-Output "CCACHE_DIR=${{ github.workspace }}\ccache" | `
            Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ccache
          key: cmake-windows-msvc-${{ matrix.vs-version }}-ccache-${{ hashFiles('lib/**', 'src/**', 'plugins/**', 'include/**') }}
          restore-keys: cmake-windows-msvc-${{ matrix.vs-version }}-ccache-
      - name: Prepare ccache
        run: |
          choco install ccache
          Get-Command ccache
          (Get-Command ccache).Source
          ccache --show-stats --verbose --version
      - name: Set version
        run: |
          "GRN_VERSION=${Env:GROONGA_VERSION}" | Set-Content version.sh
      - name: Install Apache Arrow
        shell: cmd
        run: |
          call "%VC_PREFIX%\Auxiliary\Build\vcvarsall.bat" %VC_ARCHITECTURE%
          set CMAKE_ARGS=-S apache-arrow\cpp
          set CMAKE_ARGS=%CMAKE_ARGS% -B ..\apache-arrow-build
          set CMAKE_ARGS=%CMAKE_ARGS% -G Ninja
          set CMAKE_ARGS=%CMAKE_ARGS% -DARROW_BUILD_STATIC=OFF
          set CMAKE_ARGS=%CMAKE_ARGS% -DARROW_COMPUTE=ON
          set CMAKE_ARGS=%CMAKE_ARGS% -DBoost_SOURCE=BUNDLED
          set CMAKE_ARGS=%CMAKE_ARGS% -DCMAKE_BUILD_TYPE=RelWithDebInfo
          set CMAKE_ARGS=%CMAKE_ARGS% -DCMAKE_INSTALL_PREFIX=%FULL_INSTALL_FOLDER%
          set CMAKE_ARGS=%CMAKE_ARGS% -DCMAKE_UNITY_BUILD=ON
          cmake %CMAKE_ARGS% || (type ..\apache-arrow-build\CMakeFiles\CMakeError.log & exit /B)
          cmake --build ..\apache-arrow-build || exit /B
          cmake --install ..\apache-arrow-build || exit /B
          ccache --show-stats --verbose --version
      - name: Install Groonga
        shell: cmd
        run: |
          call "%VC_PREFIX%\Auxiliary\Build\vcvarsall.bat" %VC_ARCHITECTURE%
          set CMAKE_ARGS=-S .
          set CMAKE_ARGS=%CMAKE_ARGS% -B ..\groonga-build
          set CMAKE_ARGS=%CMAKE_ARGS% -G "Ninja"
          set CMAKE_ARGS=%CMAKE_ARGS% "-DCMAKE_INSTALL_PREFIX=%FULL_INSTALL_FOLDER%"
          set CMAKE_ARGS=%CMAKE_ARGS% -DCMAKE_BUILD_TYPE=RelWithDebInfo
          set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_ALLOW_WARNING=ON
          set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_WITH_APACHE_ARROW=ON
          set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_WITH_BLOSC=auto
          set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_WITH_MRUBY=ON
          set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_WITH_XXHASH=bundled
          set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_WITH_ZLIB=no
          set CMAKE_ARGS=%CMAKE_ARGS% -DGRN_WITH_ZSTD=bundled
          set CMAKE_ARGS=%CMAKE_ARGS% -DGROONGA_NORMALIZER_MYSQL_DOC_DIR=share/groonga-normalizer-mysql
          cmake %CMAKE_ARGS% || (type ..\groonga-build\CMakeFiles\CMakeError.log & exit /B)
          cmake --build ..\groonga-build || exit /B
          cmake --install ..\groonga-build || exit /B
          ccache --show-stats --verbose --version
      - name: Install Groonga Admin
        run: |
          cd "${Env:FULL_INSTALL_FOLDER}\share\groonga\html"
          Move-Item admin admin.old
          Invoke-WebRequest `
            -Uri "https://packages.groonga.org/source/groonga-admin/groonga-admin.tar.gz" `
            -OutFile "groonga-admin.tar.gz"
          tar xf groonga-admin.tar.gz
          Remove-Item groonga-admin.tar.gz -Force
          Move-Item groonga-admin-*\html admin
          Remove-Item groonga-admin-*\source -Force -Recurse
          Move-Item groonga-admin-* ..\groonga-admin

      # Artifact
      - name: Compress the artifact without VC++ runtime
        run: |
          pushd "${Env:FULL_INSTALL_FOLDER}\.."
          Compress-Archive `
            -Path ${Env:INSTALL_FOLDER} `
            -DestinationPath "${Env:FULL_INSTALL_FOLDER}.zip"
          popd
          Copy-Item `
            "${Env:FULL_INSTALL_FOLDER}.zip" `
            "${Env:INSTALL_FOLDER}.zip"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.INSTALL_FOLDER }}
          path: ${{ env.INSTALL_FOLDER }}.zip
      - name: Prepare artifacts with VC++ runtime
        run: |
          Set-PSDebug -Trace 2

          New-Item `
            -Path "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\.." `
            -ItemType Directory
          Copy-Item -Recurse `
             "${Env:FULL_INSTALL_FOLDER}" `
             "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}"
          $GROONGA_VC_REDIST_LICENSE_DIR = `
            "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\share\groonga\vcruntime"
          New-Item `
            -Path "${GROONGA_VC_REDIST_LICENSE_DIR}" `
            -ItemType Directory

          $VC_REDIST_VERSION = (Get-Content "${Env:VC_PREFIX}\Auxiliary\Build\Microsoft.VCRedistVersion.default.txt")
          $VC_REDIST_DIR = "${Env:VC_PREFIX}\Redist\MSVC\${VC_REDIST_VERSION}\${Env:VC_ARCHITECTURE}\Microsoft.VC${{ matrix.vc-toolset-version }}.CRT"
          # Workaround: This is only needed for the current
          # windows-2019 runner. Should we use
          # Microsoft.VCToolsVersion.default.txt instead of
          # Microsoft.VCRedistVersion.default.txt?
          if (-not (Test-Path "${VC_REDIST_DIR}")) {
            $VC_REDIST_VERSION = "14.29.30133"
            $VC_REDIST_DIR = "${Env:VC_PREFIX}\Redist\MSVC\${VC_REDIST_VERSION}\${Env:VC_ARCHITECTURE}\Microsoft.VC${{ matrix.vc-toolset-version }}.CRT"
          }
          $VC_REDIST_DIR_OPEN_MP = "${Env:VC_PREFIX}\Redist\MSVC\${VC_REDIST_VERSION}\${Env:VC_ARCHITECTURE}\Microsoft.VC${{ matrix.vc-toolset-version }}.OpenMP"
          $VC_REDIST_VCRUNTIME = "${VC_REDIST_DIR}\vcruntime140.dll"
          $VC_REDIST_VCRUNTIME_1 = "${VC_REDIST_DIR}\vcruntime140_1.dll"
          $VC_REDIST_MSVCP = "${VC_REDIST_DIR}\msvcp140.dll"
          $VC_REDIST_VCOMP = "${VC_REDIST_DIR_OPEN_MP}\vcomp140.dll"
          Copy-Item `
            ${VC_REDIST_VCRUNTIME} `
            "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\bin"
          if (Test-Path ${VC_REDIST_VCRUNTIME_1}) {
            Copy-Item `
              ${VC_REDIST_VCRUNTIME_1} `
              "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\bin"
          }
          Copy-Item `
            ${VC_REDIST_MSVCP} `
            "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\bin"
          Copy-Item `
            ${VC_REDIST_VCOMP} `
            "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\bin"
          Copy-Item `
            "${Env:GITHUB_WORKSPACE}\packages\windows\vcruntime\vs${{ matrix.vs-version }}\readme.txt" `
            ${GROONGA_VC_REDIST_LICENSE_DIR}

          $UCRT_REDIST_DIR = "C:\Program Files (x86)\Windows Kits\10\Redist\ucrt\DLLs\${Env:VC_ARCHITECTURE}"
          Copy-Item `
            "${UCRT_REDIST_DIR}\*.dll" `
            "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\bin"
          Copy-Item `
            "${Env:GITHUB_WORKSPACE}\packages\windows\vcruntime\ucrt-readme.txt" `
            ${GROONGA_VC_REDIST_LICENSE_DIR}
      - name: Compress the artifact with VC++ runtime
        run: |
          pushd "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\.."
          Compress-Archive `
            -Path ${Env:INSTALL_FOLDER_WITH_VCRUNTIME} `
            -DestinationPath "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}.zip"
          popd
          Copy-Item `
            "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}.zip" `
            "${Env:INSTALL_FOLDER_WITH_VCRUNTIME}.zip"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.INSTALL_FOLDER_WITH_VCRUNTIME }}
          path: ${{ env.INSTALL_FOLDER_WITH_VCRUNTIME }}.zip

      # Release
      - name: Upload the artifacts to release
        if: |
          startsWith(github.ref, 'refs/tags/')
        run: |
          gh release upload ${Env:GITHUB_REF_NAME} `
            "${Env:INSTALL_FOLDER}.zip" `
            "${Env:INSTALL_FOLDER_WITH_VCRUNTIME}.zip"
        env:
          GH_TOKEN: ${{ github.token }}

      # Test
      - uses: ruby/setup-ruby@v1
        with:
          # We can't use "ruby" here because json-stream still uses
          # Fixnum that is removed in recent Ruby. :<
          #
          # We can use "ruby" here when we remove json-stream
          # dependency from groonga-command-parser.
          ruby-version: "3.1"
      - name: Update MSYS2
        run: |
          ridk exec pacman --sync --refresh --sysupgrade --sysupgrade --noconfirm
          taskkill /F /FI "MODULES eq msys-2.0.dll"
          ridk exec pacman --sync --refresh
      - name: Update GCC
        run: |
          ridk exec pacman --sync --noconfirm mingw-w64-ucrt-x86_64-gcc
      - name: Install test dependencies
        run: |
          $Env:MAKEFLAGS = "-j${Env:NUMBER_OF_PROCESSORS}"
          ridk exec pacman `
            --sync `
            --noconfirm `
            mingw-w64-ucrt-x86_64-arrow `
            mingw-w64-ucrt-x86_64-xsimd
          gem install `
            grntest `
            pkg-config `
            red-arrow
      - name: "Test: HTTP: reference count: Apache Arrow: chunked"
        run: |
          $Env:GRN_ENABLE_REFERENCE_COUNT = "yes"
          grntest `
            --base-directory test\command `
            --groonga "${Env:FULL_INSTALL_FOLDER_WITH_VCRUNTIME}\bin\groonga.exe" `
            --input-type apache-arrow `
            --interface http `
            --n-retries 2 `
            --read-timeout=30 `
            --reporter mark `
            --timeout 360 `
            --use-http-chunked `
            test\command\suite
